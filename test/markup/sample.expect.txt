<span class="hljs-symbol">#identity</span> = <span class="hljs-keyword"><span class="hljs-keyword">affine_map</span>&lt;<span class="hljs-attr">(d0, d1) -&gt; (d0, d1)</span>&gt;</span>

<span class="hljs-keyword">func</span> <span class="hljs-title">@func_with_ops</span>(<span class="hljs-symbol">%a</span> :<span class="hljs-type"> f32</span>) {
  <span class="hljs-symbol">%t</span> = <span class="hljs-string">&quot;getTensor&quot;</span>() : () -&gt; <span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-number">4x4x?x </span><span class="hljs-type"><span class="hljs-keyword">vector</span>&lt;<span class="hljs-number">10x</span><span class="hljs-type">f32</span>&gt;</span>&gt;</span>

  <span class="hljs-symbol">%i6</span> = muli <span class="hljs-symbol">%i2</span>, <span class="hljs-symbol">%i2</span> :<span class="hljs-type"> i32</span>
  <span class="hljs-symbol">%t2</span> = <span class="hljs-string">&quot;std.dim&quot;</span>(<span class="hljs-symbol">%t</span>){index = <span class="hljs-number">2</span>} : (<span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-number">4x4x?x</span><span class="hljs-type"><span class="hljs-keyword">vector</span>&lt;<span class="hljs-number">10x</span><span class="hljs-type">f32</span>&gt;</span>&gt;</span>) -&gt; <span class="hljs-type">!tf.index</span>
  <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Affine mappings not supported yet in highlighting</span>
  <span class="hljs-symbol">%x</span> = <span class="hljs-string">&quot;foo&quot;</span>(<span class="hljs-symbol">%a</span>, <span class="hljs-symbol">%a</span>) : (<span class="hljs-type">f32</span>,<span class="hljs-type">f32</span>) -&gt; (<span class="hljs-type"><span class="hljs-keyword">memref</span>&lt;<span class="hljs-number">1 x </span><span class="hljs-type">i32</span>, <span class="hljs-attr">(d0) -&gt; (d0)</span>, 4&gt;</span>)

  <span class="hljs-keyword">return</span>
}

<span class="hljs-keyword">func</span> <span class="hljs-title">@correct_variadic_result</span>() -&gt; <span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-type">f32</span>&gt;</span> {
  <span class="hljs-symbol">%0:5</span> = <span class="hljs-string">&quot;test.mixed_normal_variadic_result&quot;</span>() : () -&gt; (<span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-type">f32</span>&gt;</span>, <span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-type">f32</span>&gt;</span>, <span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-type">f32</span>&gt;</span>, <span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-type">f32</span>&gt;</span>, <span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-type">f32</span>&gt;</span>)
  <span class="hljs-keyword">return</span> <span class="hljs-symbol">%0#4</span> : <span class="hljs-type"><span class="hljs-keyword">tensor</span>&lt;<span class="hljs-type">f32</span>&gt;</span>
}